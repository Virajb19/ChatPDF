// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ASSISTANT
}

enum OauthProvider {
  GOOGLE
  GITHUB
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime @default(now())

  OauthProvider OauthProvider?
  OauthId String?

  isPro Boolean @default(false)

  ProfilePicture String? @default("")
  chats Chat[]

  accounts      Account[]
  sessions      Session[]
}

model Chat {
    id String @id @default(cuid())
    pdfName String
    pdfURL String? @default("")
    createdAt DateTime @default(now())
    fileKey String
    userId Int
    user User @relation(fields: [userId], references: [id])
    messages Message[]
}

model Message {
    id String @id @default(cuid())
    chatId String
    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
    content String
    createdAt DateTime @default(now())
    role Role @default(USER)
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "account_userId_index")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

